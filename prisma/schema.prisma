// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model WorkSpace {
    id        String     @id
    name      String
    description  String?
    createdAt DateTime @default(now())
    openedAt  DateTime @default(now())

    createdBy     User        @relation("UserCreatedWorkspaces", fields: [createdById], references: [id])
    createdById   String
    sharedUsers   User[]      @relation("WorkspaceSharedUsers")
    pendingUsers  User[]      @relation("WorkpacePendingUsers")

    starred   Boolean  @default(false)
    bases     Base[]
}

model Base {
  id                  String    @id @default(cuid())
  name                String
  createdAt           DateTime  @default(now())
  openedAt            DateTime
  starred             Boolean   @default(false)

  workspace           WorkSpace @relation(fields: [workspaceId], references: [id])
  workspaceId         String

  createdBy           User      @relation("UserCreatedBases", fields: [createdById], references: [id])
  createdById         String

  sharedUsers         User[]    @relation("BaseSharedUsers")
  pendingUsers        User[]    @relation("BasePendingUsers")

  tables              Table[]   @relation("BaseTables")
  lastSelectedTableId   String?

  @@index([workspaceId])
  @@index([createdById])
}

model Table {
  id               String    @id @default(cuid())
  name             String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  base             Base      @relation("BaseTables", fields: [baseId], references: [id])
  baseId           String

  fields           Field[]
  records          Record[]
}

model Field {
  id        String    @id @default(cuid())
  name      String
  type      String 
  options   Json? 
  order     String

  table     Table     @relation(fields: [tableId], references: [id])
  tableId   String

  cells     Cell[]
}

/// A “row”/record in a Table
model Record {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  order      String

  table      Table      @relation(fields: [tableId], references: [id])
  tableId    String

  cells      Cell[]
}


model Cell {
  id        String    @id @default(cuid())
  value     Json

  record    Record    @relation(fields: [recordId], references: [id])
  recordId  String

  field     Field     @relation(fields: [fieldId], references: [id])
  fieldId   String

  @@unique([recordId, fieldId]) 
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdWorkspaces    WorkSpace[] @relation("UserCreatedWorkspaces")
    sharedWorkspaces     WorkSpace[] @relation("WorkspaceSharedUsers")
    createdBases  Base[]   @relation("UserCreatedBases")
    sharedBases   Base[]   @relation("BaseSharedUsers")
    pendingWorkspaces  WorkSpace[]      @relation("WorkpacePendingUsers")
    pendingBases  Base[]      @relation("BasePendingUsers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
